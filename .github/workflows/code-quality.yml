name: Code Quality

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  schedule:
    # Run weekly on Sundays at 2 AM UTC
    - cron: "0 2 * * 0"

jobs:
  # SonarCloud analysis
  sonarcloud:
    name: SonarCloud Analysis
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20.x"
          cache: "npm"

      - name: Install dependencies
        run: |
          cd client && npm ci
          cd ../server && npm ci

      - name: Run tests with coverage
        run: |
          cd client && npm run test:coverage
          cd ../server && npm test

      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  # ESLint analysis
  eslint:
    name: ESLint Analysis
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20.x"
          cache: "npm"
          cache-dependency-path: client/package-lock.json

      - name: Install dependencies
        run: |
          cd client
          npm ci

      - name: Run ESLint
        run: |
          cd client
          npx eslint . --ext .js,.jsx,.ts,.tsx --format @microsoft/eslint-formatter-sarif --output-file eslint-results.sarif
        continue-on-error: true

      - name: Upload ESLint results to GitHub
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: client/eslint-results.sarif
          wait-for-processing: true

  # Prettier check
  prettier:
    name: Prettier Check
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20.x"
          cache: "npm"

      - name: Install Prettier
        run: npm install -g prettier

      - name: Check client formatting
        run: |
          cd client
          prettier --check "src/**/*.{js,jsx,ts,tsx,css,md,json}"

      - name: Check server formatting
        run: |
          cd server
          prettier --check "**/*.{js,ts,json,md}" --ignore-path .gitignore

  # Bundle analysis
  bundle-analysis:
    name: Bundle Analysis
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20.x"
          cache: "npm"
          cache-dependency-path: client/package-lock.json

      - name: Install dependencies
        run: |
          cd client
          npm ci

      - name: Build client
        run: |
          cd client
          npm run build

      - name: Analyze bundle
        uses: actions/upload-artifact@v4
        with:
          name: bundle-analysis
          path: client/dist/

      - name: Bundle size check
        run: |
          cd client/dist
          echo "Bundle sizes:"
          ls -lah

          # Check if bundle is too large (adjust threshold as needed)
          MAX_SIZE=5000000  # 5MB
          for file in *.js; do
            if [ -f "$file" ]; then
              size=$(stat -f%z "$file" 2>/dev/null || stat -c%s "$file")
              if [ $size -gt $MAX_SIZE ]; then
                echo "⚠️ Warning: $file is ${size} bytes (over ${MAX_SIZE} bytes)"
              else
                echo "✅ $file size is acceptable: ${size} bytes"
              fi
            fi
          done

  # Lighthouse CI
  lighthouse:
    name: Lighthouse CI
    runs-on: ubuntu-latest

    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20.x"
          cache: "npm"

      - name: Install dependencies
        run: |
          cd client && npm ci
          cd ../server && npm ci

      - name: Build client
        env:
          VITE_API_URL: http://localhost:5000/api
        run: |
          cd client
          npm run build

      - name: Start test server
        env:
          NODE_ENV: test
          PORT: 5000
          REDIS_URL: redis://localhost:6379
        run: |
          cd server
          npm start &
          sleep 10

      - name: Serve client build
        run: |
          cd client
          npx serve -s dist -l 3000 &
          sleep 5

      - name: Run Lighthouse CI
        run: |
          npm install -g @lhci/cli@0.12.x
          lhci autorun
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}

  # Dependency review
  dependency-review:
    name: Dependency Review
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Dependency Review
        uses: actions/dependency-review-action@v4
        with:
          fail-on-severity: moderate
          deny-licenses: GPL-2.0, GPL-3.0
