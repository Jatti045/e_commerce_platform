name: Security Scan

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  schedule:
    # Run daily at 6 AM UTC
    - cron: "0 6 * * *"

jobs:
  # CodeQL analysis
  codeql:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write

    strategy:
      fail-fast: false
      matrix:
        language: ["javascript"]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}

      - name: Autobuild
        uses: github/codeql-action/autobuild@v3

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:${{matrix.language}}"

  # Dependency vulnerability scan
  dependency-scan:
    name: Dependency Vulnerability Scan
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20.x"
          cache: "npm"

      - name: Client dependency audit
        run: |
          cd client
          npm audit --audit-level moderate

      - name: Server dependency audit
        run: |
          cd server
          npm audit --audit-level moderate

      - name: Check for known vulnerabilities with Snyk
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=medium

  # Docker image security scan
  container-scan:
    name: Container Security Scan
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build client image
        run: |
          docker build -t billify-client:security-scan ./client

      - name: Build server image
        run: |
          docker build -t billify-server:security-scan ./server

      - name: Scan client image with Trivy
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: "billify-client:security-scan"
          format: "sarif"
          output: "client-trivy-results.sarif"

      - name: Scan server image with Trivy
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: "billify-server:security-scan"
          format: "sarif"
          output: "server-trivy-results.sarif"

      - name: Upload client Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: "client-trivy-results.sarif"
          category: "client-container"

      - name: Upload server Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: "server-trivy-results.sarif"
          category: "server-container"

  # Secrets scan
  secrets-scan:
    name: Secrets Scan
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: TruffleHog OSS
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD
          extra_args: --debug --only-verified

  # License compliance
  license-scan:
    name: License Compliance
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20.x"
          cache: "npm"

      - name: Install license checker
        run: npm install -g license-checker

      - name: Check client licenses
        run: |
          cd client
          npm ci
          license-checker --onlyAllow 'MIT;Apache-2.0;BSD-2-Clause;BSD-3-Clause;ISC;0BSD' --excludePrivatePackages

      - name: Check server licenses
        run: |
          cd server
          npm ci
          license-checker --onlyAllow 'MIT;Apache-2.0;BSD-2-Clause;BSD-3-Clause;ISC;0BSD' --excludePrivatePackages

  # OWASP ZAP security test
  owasp-zap:
    name: OWASP ZAP Security Test
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'

    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20.x"
          cache: "npm"

      - name: Install dependencies
        run: |
          cd client && npm ci
          cd ../server && npm ci

      - name: Build and start application
        env:
          NODE_ENV: test
          PORT: 5000
          REDIS_URL: redis://localhost:6379
          VITE_API_URL: http://localhost:5000/api
        run: |
          cd client && npm run build &
          cd server && npm start &
          sleep 30

      - name: ZAP Scan
        uses: zaproxy/action-baseline@v0.10.0
        with:
          target: "http://localhost:3000"
          rules_file_name: ".zap/rules.tsv"
          cmd_options: "-a"
