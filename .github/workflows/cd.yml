name: CD Pipeline

on:
  push:
    branches: [main]
    tags: ["v*"]
  workflow_run:
    workflows: ["CI Pipeline"]
    types:
      - completed
    branches: [main]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME_CLIENT: ${{ github.repository }}/client
  IMAGE_NAME_SERVER: ${{ github.repository }}/server

jobs:
  # Only run if CI passed
  check-ci:
    name: Check CI Status
    runs-on: ubuntu-latest
    if: github.event.workflow_run.conclusion == 'success' || github.event_name == 'push'
    steps:
      - name: CI passed
        run: echo "CI pipeline passed, proceeding with deployment"

  # Build and push Docker images
  build-and-push:
    name: Build and Push Images
    runs-on: ubuntu-latest
    needs: check-ci
    permissions:
      contents: read
      packages: write

    outputs:
      client-image: ${{ steps.meta-client.outputs.tags }}
      server-image: ${{ steps.meta-server.outputs.tags }}
      client-digest: ${{ steps.build-client.outputs.digest }}
      server-digest: ${{ steps.build-server.outputs.digest }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract client metadata
        id: meta-client
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_CLIENT }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-

      - name: Extract server metadata
        id: meta-server
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_SERVER }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-

      - name: Build and push client image
        id: build-client
        uses: docker/build-push-action@v5
        with:
          context: ./client
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta-client.outputs.tags }}
          labels: ${{ steps.meta-client.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            VITE_API_URL=${{ secrets.VITE_API_URL || 'https://your-api-domain.com/api' }}

      - name: Build and push server image
        id: build-server
        uses: docker/build-push-action@v5
        with:
          context: ./server
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta-server.outputs.tags }}
          labels: ${{ steps.meta-server.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Deploy to staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/main'
    environment: staging

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to staging server
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.STAGING_HOST }}
          username: ${{ secrets.STAGING_USER }}
          key: ${{ secrets.STAGING_SSH_KEY }}
          script: |
            # Pull latest images
            docker pull ${{ needs.build-and-push.outputs.client-image }}
            docker pull ${{ needs.build-and-push.outputs.server-image }}

            # Update docker-compose.staging.yml with new image tags
            cd /app/billify-staging
            git pull origin main

            # Stop existing containers
            docker compose -f docker-compose.staging.yml down

            # Start with new images
            export CLIENT_IMAGE=${{ needs.build-and-push.outputs.client-image }}
            export SERVER_IMAGE=${{ needs.build-and-push.outputs.server-image }}
            docker compose -f docker-compose.staging.yml up -d

            # Health check
            sleep 30
            curl -f http://localhost:3000/health || exit 1

      - name: Run staging tests
        run: |
          # Add staging environment tests here
          echo "Running staging tests..."
          # Example: newman run staging-tests.json --environment staging.env

  # Deploy to production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-and-push, deploy-staging]
    if: startsWith(github.ref, 'refs/tags/v')
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to production server
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.PRODUCTION_HOST }}
          username: ${{ secrets.PRODUCTION_USER }}
          key: ${{ secrets.PRODUCTION_SSH_KEY }}
          script: |
            # Pull latest images
            docker pull ${{ needs.build-and-push.outputs.client-image }}
            docker pull ${{ needs.build-and-push.outputs.server-image }}

            # Update production deployment
            cd /app/billify-production
            git pull origin main

            # Blue-green deployment strategy
            # Stop old containers gracefully
            docker compose -f docker-compose.production.yml stop

            # Start new containers
            export CLIENT_IMAGE=${{ needs.build-and-push.outputs.client-image }}
            export SERVER_IMAGE=${{ needs.build-and-push.outputs.server-image }}
            docker compose -f docker-compose.production.yml up -d

            # Health check
            sleep 30
            curl -f https://your-domain.com/health || exit 1

            # Remove old images
            docker image prune -f

      - name: Run production health checks
        run: |
          echo "Running production health checks..."
          # Add production health check commands here

  # Notify deployment status
  notify:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()

    steps:
      - name: Notify Slack on success
        if: success()
        uses: 8398a7/action-slack@v3
        with:
          status: success
          text: "üöÄ Billify deployment successful!"
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}

      - name: Notify Slack on failure
        if: failure()
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          text: "‚ùå Billify deployment failed!"
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
