name: Performance Monitoring

on:
  push:
    branches: [main]
  schedule:
    # Run performance tests daily at 3 AM UTC
    - cron: "0 3 * * *"
  workflow_dispatch:

jobs:
  # Load testing
  load-testing:
    name: Load Testing
    runs-on: ubuntu-latest

    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20.x"
          cache: "npm"

      - name: Install dependencies
        run: |
          cd server && npm ci

      - name: Start server
        env:
          NODE_ENV: test
          PORT: 5000
          REDIS_URL: redis://localhost:6379
        run: |
          cd server
          npm start &
          sleep 10

      - name: Install k6
        run: |
          sudo gpg -k
          sudo gpg --no-default-keyring --keyring /usr/share/keyrings/k6-archive-keyring.gpg --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
          echo "deb [signed-by=/usr/share/keyrings/k6-archive-keyring.gpg] https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
          sudo apt-get update
          sudo apt-get install k6

      - name: Run load tests
        run: |
          cat > load-test.js << 'EOF'
          import http from 'k6/http';
          import { check, sleep } from 'k6';

          export const options = {
            stages: [
              { duration: '2m', target: 10 }, // Ramp up
              { duration: '5m', target: 50 }, // Stay at 50 users
              { duration: '2m', target: 0 },  // Ramp down
            ],
            thresholds: {
              http_req_duration: ['p(95)<500'], // 95% of requests under 500ms
              http_req_failed: ['rate<0.02'],   // Less than 2% failure rate
            },
          };

          export default function() {
            // Test API endpoints
            const response = http.get('http://localhost:5000/api/health');
            check(response, {
              'status is 200': (r) => r.status === 200,
              'response time < 500ms': (r) => r.timings.duration < 500,
            });
            
            sleep(1);
          }
          EOF

          k6 run load-test.js

      - name: Upload load test results
        uses: actions/upload-artifact@v4
        with:
          name: load-test-results
          path: k6-results.json

  # Bundle size monitoring
  bundle-size:
    name: Bundle Size Monitoring
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20.x"
          cache: "npm"
          cache-dependency-path: client/package-lock.json

      - name: Install dependencies
        run: |
          cd client
          npm ci

      - name: Build application
        run: |
          cd client
          npm run build

      - name: Analyze bundle size
        uses: andresz1/size-limit-action@v1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          package_manager: npm
          directory: client

  # Database performance
  database-performance:
    name: Database Performance
    runs-on: ubuntu-latest

    services:
      mongodb:
        image: mongo:7
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.adminCommand(\"ping\")'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20.x"
          cache: "npm"
          cache-dependency-path: server/package-lock.json

      - name: Install dependencies
        run: |
          cd server
          npm ci

      - name: Run database performance tests
        env:
          MONGODB_URI: mongodb://localhost:27017/performance_test
          NODE_ENV: test
        run: |
          cd server
          cat > db-performance-test.js << 'EOF'
          const mongoose = require('mongoose');
          const User = require('./models/User');

          async function runPerformanceTests() {
            await mongoose.connect(process.env.MONGODB_URI);
            
            console.log('Starting database performance tests...');
            
            // Test 1: Bulk insert performance
            const start1 = Date.now();
            const users = Array.from({ length: 1000 }, (_, i) => ({
              userName: `testuser${i}`,
              email: `test${i}@example.com`,
              password: 'hashedpassword'
            }));
            
            await User.insertMany(users);
            const insertTime = Date.now() - start1;
            console.log(`Bulk insert 1000 users: ${insertTime}ms`);
            
            // Test 2: Query performance
            const start2 = Date.now();
            await User.find({ userName: { $regex: 'testuser' } }).limit(100);
            const queryTime = Date.now() - start2;
            console.log(`Query 100 users: ${queryTime}ms`);
            
            // Cleanup
            await User.deleteMany({ userName: { $regex: 'testuser' } });
            await mongoose.disconnect();
            
            // Performance thresholds
            if (insertTime > 5000) {
              throw new Error(`Insert performance too slow: ${insertTime}ms`);
            }
            if (queryTime > 1000) {
              throw new Error(`Query performance too slow: ${queryTime}ms`);
            }
            
            console.log('All performance tests passed!');
          }

          runPerformanceTests().catch(console.error);
          EOF

          node db-performance-test.js
